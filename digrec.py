# -*- coding: utf-8 -*-
"""digREC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1miKCAn_BFC-WnOZGAJssRjolY7n73H3y
"""

#DIGIT REC KAGGLE

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!ls -l ~/.kaggle
!cat ~/.kaggle/kaggle.json

!pip install -q kaggle
!pip install -q kaggle-cli

!kaggle competitions list

!kaggle competitions download -c 'digit-recognizer'

!ls

import pandas as pd
df = pd.read_csv("train.csv")
df.head()

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import precision_score, recall_score, confusion_matrix,  roc_curve, precision_recall_curve, accuracy_score, roc_auc_score
from keras.models import Sequential
from keras.layers import Dense, Dropout,Lambda, Activation,Flatten, Conv2D, MaxPool2D, BatchNormalization
from keras.optimizers import Adam
from keras.optimizers import RMSprop
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau
import tensorflow as tf
import os

#ignore warning messages 
import warnings
warnings.filterwarnings('ignore')

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

# Splite data the X - Our data , and y - the prdict label
X = train.drop('label',axis = 1)
y = train['label'].astype('category')



X_train, X_test, y_train, y_test = train_test_split(X,y)

# scale data
standard_scaler = StandardScaler()
standard_scaler.fit(X_train)

X_train = standard_scaler.transform(X_train)
X_test = standard_scaler.transform(X_test)


print(X_train)

print("Data after scaler")
plt.imshow(X_train[0].reshape(28,28),interpolation='nearest', cmap='Greys')
X_train[0][30:50]

X_train = tf.reshape(X_train, [-1, 28, 28,1])
X_test = tf.reshape(X_test, [-1, 28, 28,1])

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation=tf.nn.relu),
    Dense(10, activation=tf.nn.softmax)
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, steps_per_epoch = 32,epochs=15, validation_data = (X_test, y_test), validation_steps = 10)

test_loss, test_acc = model.evaluate(X_test, y_test, steps = 10)
print("loss",test_loss)
print("acc",test_acc)

fn =  "mymodel.h5"
model.save_weights(fn)

#To test image online in colab
# import cv2
# gray = cv2.imread("images.png", cv2.IMREAD_GRAYSCALE)
# gray = cv2.resize(255-gray, (28, 28))
# # gray = gray/255
# plt.imshow(gray, cmap=plt.get_cmap('gray'))
# plt.show()
# pr = model.predict_classes(gray.reshape(1, 28, 28))
# print(pr)

